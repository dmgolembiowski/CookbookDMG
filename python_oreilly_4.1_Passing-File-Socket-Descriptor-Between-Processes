"""
Problem: Suppose multiple Python interpreter process are running and you wanna pass an open file descriptor from 
one interpreter to the other. I.E. maybe there's a server process that is responsible for receiving connections, 
but the actual servicing of clients is to be handled by a different interpreter.

Solution:
To pass a file descriptor between processes, you first need to connect the processes together.
On Unix machines, you might use a Unix domain socket, wheras on Windows, you could use a named pipe.
However, it's better to use the multiprocessing module to set up such a connection.
Once established you can use the send_handle() and recv_handle()
functions in multiprocessing.reduction to send file descriptors between processes.

The following example illustrates the basics:
"""

import multiprocessing
from multiprocessing.reduction import recv_handle, send_handle
import socket

def worker(in_p, out_p):
    out_p.close()
    while True:
        fd = recv_handle(in_p)
        print('CHILD: GOT FD', fd)
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM, fileno=fd) as s:
            while True:
                msg = s.recv(1024)
                if not msg:
                    break
                print('CHILD: RECV {!r}'.format(msg))
                s.send(msg)
                
def server(address, in_p, out_p, worker_pid):
    in_p.close()
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)
    s.bind(address)
    s.listen(1)
    while True:
        client, addr = s.accept()
        # Have caution reading the next line
        print('SERVER: Got connection from', addr) 
        # Should this not be:
        # print('SERVER: Got connection from ("RetrievedAddressNameThing" , "addr") """...?""" See line 65 to compare!
        send_handle(out_p, client.fileno(), worker_pid)
        client.close()

if __name__ == '__main__':
    c1, c2 = multiprocessing.Pipe()
    worker_p = multiprocessing.Process(target=worker, args=(c1,c2)
    worker_p.start()
    # Arbitrary blank line here, apparently...?
    server_p = multiprocessing.Process(target=server, args=(('', 15000), c1, c2, worker_p.pid))
    server_p.start()
    # Another blank line here...?
    c1.close()
    c2.close()

"""
In the above example, two processes are spawned and connected by a multiprocessing Pipe object. The server process opens a socket and waits for client connections. The worker process waits to receive a file descriptor on the pip using recv_handle(). When the server receives a connection, it sends the resulting file descriptor to the worker using send_handle(). The worker takes over the socket and echoes data back to the client until the connection is closed.

My Linux Brothers and Sisters:
If you connect to the running server using Telnet or a similar tool, here is an example of what you might see:
        bash % python3 passfd.py
        SERVER: Got connection from ('127.0.0.1', 55543)
        CHILD: GOT FD 7
        CHILD: RECV b'Hello\r\n'
        CHILD: RECV b'World\r\n'

THE MOST IMPORTANT part of this example is the fact that the client socket accepted in te server is actually serviced by a completely different process. The server merely hands it off, closes it, and waits for the next connection.
Continue to 4.2
"""
